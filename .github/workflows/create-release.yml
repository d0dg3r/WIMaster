name: Create Release with Zip

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write  # Required for creating releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create release zip
      run: |
        echo "üì¶ Creating WIMaster release package..."
        
        # Create a temporary directory for the release files
        mkdir -p release-temp
        
        # Copy all files except .git, .github, and other unnecessary files
        echo "üìÇ Copying repository files..."
        rsync -av --exclude='.git' \
                  --exclude='.github' \
                  --exclude='*.log' \
                  --exclude='*.tmp' \
                  --exclude='.DS_Store' \
                  --exclude='Thumbs.db' \
                  --exclude='release-temp' \
                  ./ release-temp/
        
        # Verify content before zipping
        echo "üìã Release package contents:"
        ls -la release-temp/ | head -20
        
        # Create the zip file
        echo "üóúÔ∏è Creating zip archive..."
        cd release-temp
        zip -r ../WIMaster-release.zip .
        cd ..
        
        # Verify zip was created and show details
        if [ -f "WIMaster-release.zip" ]; then
          echo "‚úÖ WIMaster-release.zip created successfully"
          echo "üìä Zip file details:"
          ls -la WIMaster-release.zip
          echo "üìã Zip contents preview:"
          unzip -l WIMaster-release.zip | head -20
        else
          echo "‚ùå Failed to create WIMaster-release.zip"
          exit 1
        fi
    
    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=manual-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Verify release files before upload
      run: |
        echo "üîç Final verification before release upload..."
        
        if [ ! -f "WIMaster-release.zip" ]; then
          echo "‚ùå WIMaster-release.zip not found!"
          exit 1
        fi
        
        # Check zip file size (should be > 500KB for a complete release)
        zip_size=$(stat -c%s WIMaster-release.zip)
        if [ $zip_size -lt 512000 ]; then
          echo "‚ùå WIMaster-release.zip too small ($zip_size bytes) - incomplete package!"
          exit 1
        fi
        
        echo "‚úÖ WIMaster-release.zip verified ($zip_size bytes)"
        echo "üìã Release files ready for upload:"
        ls -la WIMaster-release.zip
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        name: WIMaster ${{ steps.tag.outputs.tag_name }}
        body: |
          ## WIMaster Release ${{ steps.tag.outputs.tag_name }}
          
          This release contains all WIMaster files packaged for distribution.
          
          ### What's Included:
          - All batch and PowerShell scripts
          - Configuration files and templates  
          - Documentation files
          - Utility executables
          - Build tools and setup scripts
          
          ### Installation:
          1. Download the WIMaster-release.zip file
          2. Extract to your desired location
          3. Run WIMaster-Setup.bat "as administrator"
          
          ### Package Contents:
          - Complete WIMaster toolkit
          - All necessary configuration files
          - Setup and build tools
          
          ### Usage:
          After installation, you can run WIMaster using:
          - `Start-WIMaster.bat` - Main interface
          - `Start-WIMaster-Menu.bat` - Menu-driven interface
          - `Start-WIMaster-Unattended.bat` - Automated mode
        files: |
          WIMaster-release.zip
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
